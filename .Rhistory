if(nchar(api_key)<1) {
api_key <- readline("Paste your API key here: ")
Sys.setenv(GEMINI_API_KEY = api_key)
}
model_query <- paste0(model, ":generateContent")
response <- POST(
url = paste0("https://generativelanguage.googleapis.com/v1beta/models/", model_query),
query = list(key = api_key),
content_type_json(),
encode = "json",
body = list(
contents = list(
parts = list(
list(text = prompt)
)),
generationConfig = list(
temperature = temperature,
maxOutputTokens = max_output_tokens
)
)
)
if(response$status_code>200) {
stop(paste("Error - ", content(response)$error$message))
}
candidates <- content(response)$candidates
outputs <- unlist(lapply(candidates, function(candidate) candidate$content$parts))
return(outputs)
}
prompt <- "R code to remove duplicates using dplyr."
cat(gemini(prompt))
GEMINI_API_KEY <- "AIzaSyClruIn9Mwi2VZ--36oxnEXOckfqS31qQo"
# Function
gemini <- function(prompt,
temperature=0.5,
max_output_tokens=1024,
api_key=Sys.getenv("GEMINI_API_KEY"),
model = "gemini-1.5-pro-latest") {
if(nchar(api_key)<1) {
api_key <- readline("Paste your API key here: ")
Sys.setenv(GEMINI_API_KEY = api_key)
}
model_query <- paste0(model, ":generateContent")
response <- POST(
url = paste0("https://generativelanguage.googleapis.com/v1beta/models/", model_query),
query = list(key = api_key),
content_type_json(),
encode = "json",
body = list(
contents = list(
parts = list(
list(text = prompt)
)),
generationConfig = list(
temperature = temperature,
maxOutputTokens = max_output_tokens
)
)
)
if(response$status_code>200) {
stop(paste("Error - ", content(response)$error$message))
}
candidates <- content(response)$candidates
outputs <- unlist(lapply(candidates, function(candidate) candidate$content$parts))
return(outputs)
}
cat(gemini(prompt))
# Function
gemini <- function(prompt,
temperature=0.5,
max_output_tokens=1024,
api_key=Sys.getenv("GEMINI_API_KEY"),
model = "gemini-1.5-pro-latest") {
if(nchar(api_key)<1) {
api_key <- readline("Paste your API key here: ")
Sys.setenv(GEMINI_API_KEY = api_key)
}
model_query <- paste0(model, ":generateContent")
response <- POST(
url = paste0("https://generativelanguage.googleapis.com/v1beta/models/", model_query),
query = list(key = api_key),
content_type_json(),
encode = "json",
body = list(
contents = list(
parts = list(
list(text = prompt)
)),
generationConfig = list(
temperature = temperature,
maxOutputTokens = max_output_tokens
)
)
)
if(response$status_code>200) {
stop(paste("Error - ", content(response)$error$message))
}
candidates <- content(response)$candidates
outputs <- unlist(lapply(candidates, function(candidate) candidate$content$parts))
return(outputs)
}
GEMINI_API_KEY <- ""
# Function
gemini <- function(prompt,
temperature=0.5,
max_output_tokens=1024,
api_key=Sys.getenv("GEMINI_API_KEY"),
model = "gemini-1.5-pro-latest") {
if(nchar(api_key)<1) {
api_key <- readline("Paste your API key here: ")
Sys.setenv(GEMINI_API_KEY = api_key)
}
model_query <- paste0(model, ":generateContent")
response <- POST(
url = paste0("https://generativelanguage.googleapis.com/v1beta/models/", model_query),
query = list(key = api_key),
content_type_json(),
encode = "json",
body = list(
contents = list(
parts = list(
list(text = prompt)
)),
generationConfig = list(
temperature = temperature,
maxOutputTokens = max_output_tokens
)
)
)
if(response$status_code>200) {
stop(paste("Error - ", content(response)$error$message))
}
candidates <- content(response)$candidates
outputs <- unlist(lapply(candidates, function(candidate) candidate$content$parts))
return(outputs)
}
prompt <- "R code to remove duplicates using dplyr."
cat(gemini(prompt))
Sys.setenv(GEMINI_API_KEY = "AIzaSyClruIn9Mwi2VZ--36oxnEXOckfqS31qQo") # Set API Key
# Function
gemini <- function(prompt,
temperature=0.5,
max_output_tokens=1024,
api_key=Sys.getenv("GEMINI_API_KEY"),
model = "gemini-1.5-pro-latest") {
if(nchar(api_key)<1) {
api_key <- readline("Paste your API key here: ")
Sys.setenv(GEMINI_API_KEY = api_key)
}
model_query <- paste0(model, ":generateContent")
response <- POST(
url = paste0("https://generativelanguage.googleapis.com/v1beta/models/", model_query),
query = list(key = api_key),
content_type_json(),
encode = "json",
body = list(
contents = list(
parts = list(
list(text = prompt)
)),
generationConfig = list(
temperature = temperature,
maxOutputTokens = max_output_tokens
)
)
)
if(response$status_code>200) {
stop(paste("Error - ", content(response)$error$message))
}
candidates <- content(response)$candidates
outputs <- unlist(lapply(candidates, function(candidate) candidate$content$parts))
return(outputs)
}
prompt <- "R code to remove duplicates using dplyr."
cat(gemini(prompt))
cat(gemini(prompt))
# install.packages("pak")
pak::pak("jhk0530/gemini.R")
setAPI("AIzaSyClruIn9Mwi2VZ--36oxnEXOckfqS31qQo") # check https://makersuite.google.com/app/apikey
library(gemini.R)
setAPI("AIzaSyClruIn9Mwi2VZ--36oxnEXOckfqS31qQo") # check https://makersuite.google.com/app/apikey
gemini("Explain about the gemini in astrology in one line")
gemini("Explain about the gemini in astrology in one line")
cite()
citation()
knitr::opts_chunk$set(echo = TRUE)
library(haven)
db <- read_sav("D:/OneDrive - ISPA/ongoing/Sabatical/UBrasilia/Analises/Receita de bolo/Instrumentos/Perceived Social Support_m.sav")|>as.data.frame()
#convert all SupportS Items to numeric
db[,18:29] <- lapply(db[,18:29], as.numeric)
source("D:\\OneDrive - ISPA\\invA.R")
View(invA)
db$Sexo
bd$Sex <- as.numeric(bd$Sexo)
db$Sex <- as.numeric(db$Sexo)
invA(model=mod,bd=db[,18:29],group=db$Sex)
library(lavaan)
invA(model=mod,bd=db[,18:29],group=db$Sex)
pacman::p_load(haven, lavaan, skimr, semTools, knitr, kableExtra,dplyr, lavaanPlot, MVN,readxl)
# AFC
mod <-"
familia=~SuporteS3+SuporteS4+SuporteS8+SuporteS11
outros=~SuporteS1+SuporteS2+SuporteS5+SuporteS10
amigos =~SuporteS6+SuporteS7+SuporteS9+SuporteS12
"
invA(model=mod,bd=db[,18:29],group=db$Sex)
db$Sex
library(haven)
db <- read_sav("D:/OneDrive - ISPA/ongoing/Sabatical/UBrasilia/Analises/Receita de bolo/Instrumentos/Perceived Social Support_m.sav")|>as.data.frame()
#convert all SupportS Items to numeric
db[,18:29] <- lapply(db[,18:29], as.numeric)
pacman::p_load(haven, lavaan, skimr, semTools, knitr, kableExtra,dplyr, lavaanPlot, MVN,readxl)
mod <-"
familia=~SuporteS3+SuporteS4+SuporteS8+SuporteS11
outros=~SuporteS1+SuporteS2+SuporteS5+SuporteS10
amigos =~SuporteS6+SuporteS7+SuporteS9+SuporteS12
"
source("D:\\OneDrive - ISPA\\psicomA.R")
res <- psicomA(model=mod,bd=db[,18:29],ordered=T,vd=T)
db$Sex <- as.numeric(db$Sexo)
invA(model=mod,bd=db[,18:29],group=db$Sex)
fit_config <- sem(model=model,data=db, group=Sex, estimator="MLR", std.lv=T)
fit_config <- sem(model=mod,data=db, group=Sex, estimator="MLR", std.lv=T)
db$Sex <- as.numeric(db$Sexo)
fit_config <- sem(model=mod,data=db, group=Sex, estimator="MLR", std.lv=T)
fit_config <- sem(model=mod,data=db, group=db$Sex, estimator="MLR", std.lv=T)
fit_config <- sem(model=mod,data=db, group=db$Sexo, estimator="MLR", std.lv=T)
invA(model=mod,bd=db,group=db$Sexo)
db$Sex <- as.numeric(db$Sexo)
invA(model=mod,bd=db,group=db$Sex)
fit_config <- sem(model=mod, data=db, group="Sex", estimator="MLR", std.lv=TRUE)
invA(model=mod,bd=db,group=Sex)
invA(model=mod,bd=db,group=db$Sex)
View(invA)
invA(model=mod,bd=db,group="Sex")
library(lavaan)
source("D:\\OneDrive - ISPA\\invA.R")
db$Sex <- as.numeric(db$Sexo)
invA(model=mod,bd=db,group="Sex")
fit_config <- sem(model=mod, data=db, group="Sex", estimator="MLR", std.lv=TRUE)
View(db)
View(db)
db$Tempo_instituicao
db$tempo <- as.numeric(db$Tempo_instituicao)
modc <- paste0(mod,
"tempo ~ familia + outros + amigos")
fitc <- sem(model=modc, data=db, estimator="MLR", std.lv=TRUE, rsquare=TRUE)
fitc <- sem(model=modc, data=db, estimator="MLR", std.lv=TRUE, rsq=TRUE)
fitc <- sem(model=modc, data=db, estimator="MLR", std.lv=TRUE)
summary(fitc, fit.measures=TRUE, standardized=TRUE, rsquare=TRUE)
db$tempo <- as.numeric(db$Tempo_instituicao)
modc <- paste0(mod,
"suporte =~ familia + outros + amigos\n"
"tempo ~ suporte")
db$tempo <- as.numeric(db$Tempo_instituicao)
modc <- paste0(mod,
"suporte =~ familia + outros + amigos\n",
"tempo ~ suporte")
fitc <- sem(model=modc, data=db, estimator="MLR", std.lv=TRUE)
summary(fitc, fit.measures=TRUE, standardized=TRUE, rsquare=TRUE)
hist(db$tempo)
lavannPlot(fitc)
lavaanPlot::lavaanPlot(fitc, type="est", layout="circo", fixed=TRUE, fixedStyle="filled", fixedColor="lightblue", fixedSize=10, fixedShape="rectangle", fixedFill="lightblue", fixedLabelSize=10, fixedLabelColor="black", fixedLabelFont="Arial", fixedLabelFace="bold", fixedLabelOffset=0.1, fixedLabelJust="center", fixedLabelColor="black", fixedLabelFont="Arial", fixedLabelFace="bold", fixedLabelOffset=0.1, fixedLabelJust="center", fixedLabelColor="black", fixedLabelFont="Arial", fixedLabelFace="bold", fixedLabelOffset=0.1, fixedLabelJust="center", fixedLabelColor="black", fixedLabelFont="Arial", fixedLabelFace="bold", fixedLabelOffset=0.1, fixedLabelJust="center", fixedLabelColor="black", fixedLabelFont="Arial", fixedLabelFace="bold", fixedLabelOffset=0.1, fixedLabelJust="center", fixedLabelColor="black", fixedLabelFont="Arial", fixedLabelFace="bold", fixedLabelOffset=0.1, fixedLabelJust="center", fixedLabelColor="black", fixedLabelFont="Arial", fixedLabelFace="bold", fixedLabelOffset=0.1, fixedLabelJust="center", fixedLabelColor="black", fixedLabelFont="Arial", fixedLabelFace="bold", fixedLabelOffset=0.1, fixedLabelJust="center", fixedLabelColor="black", fixedLabelFont="Arial", fixedLabelFace="bold", fixedLabelOffset=0.1, fixedLabelJust="center", fixedLabelColor="black", fixedLabelFont="Arial", fixedLabelFace="bold", fixedLabelOffset=0.1, fixedLabelJust="center", fixedLabelColor="black", fixedLabelFont="Arial", fixedLabelFace="bold", fixedLabelOffset=0.1, fixedLabelJust="center", fixedLabelColor="black", fixedLabelFont="Arial", fixedLabelFace="bold", fixedLabelOffset=0.1, fixedLabelJust="center", fixedLabelColor="black", fixedLabelFont="Arial", fixedLabelFace="bold", fixedLabelOffset=0.1, fixedLabelJust="center", fixedLabelColor="black", fixedLabelFont="Arial", fixedLabelFace="bold", fixedLabelOffset=0.1, fixedLabelJust="center", fixedLabel)
lavaanPlot::lavaanPlot(fitc, type="est")
lavaanPlot(model=fitc, graph_options = list(layout="dot",rankdir = "LR"),node_options = list(shape = "box", fontname = "Helvetica", style="filled",fillcolor="cyan"), stand=T, coefs = T, covs = F, stars = "regress")
knitr::opts_chunk$set(echo = TRUE)
library(mice)
library(broom)
library(readxl)
dados <- read_excel("D:/OneDrive - ISPA/ongoing/Sabatical/UBrasilia/Analises/LaraBarbosa/BANCO_PR_IMPUTAR.xlsx")
View(dados)
#imputar <- cbind(dados[,90:171], dados[,848])
imp.data <- mice (data=dados, m=5, maxit=5, seed=123, print=TRUE)
library(readxl)
library(dplyr)
dados <- read_excel("E:/BANCO_GERAL2.xlsx")
dados <- dados %>%
mutate(across(c(NEO_1, NEO_61, NEO_121, NEO_181, NEO_36, NEO_96, NEO_156, NEO_11, NEO_71, NEO_46,
NEO_106, NEO_166, NEO_21, NEO_81, NEO_141, NEO_231, NEO_56, NEO_116, NEO_176, NEO_206, NEO_236, NEO_32,
NEO_92, NEO_7, NEO_67, NEO_127, NEO_187, NEO_42, NEO_102, NEO_162, NEO_222, NEO_17, NEO_77, NEO_137,
NEO_52, NEO_112, NEO_27, NEO_87, NEO_147, NEO_207, NEO_33, NEO_93, NEO_153, NEO_183, NEO_213, NEO_8,
NEO_68, NEO_128, NEO_43, NEO_103, NEO_163, NEO_18, NEO_78, NEO_138, NEO_198, NEO_228, NEO_53, NEO_113,
NEO_173, NEO_28, NEO_88, NEO_148, NEO_208, NEO_238, NEO_4, NEO_64, NEO_124, NEO_39, NEO_99, NEO_159,
NEO_189, NEO_219, NEO_14, NEO_74, NEO_134, NEO_49, NEO_109, NEO_169, NEO_199, NEO_229, NEO_24, NEO_84,
NEO_144, NEO_234, NEO_59, NEO_119, NEO_5, NEO_35, NEO_95, NEO_155, NEO_10, NEO_70, NEO_130, NEO_190, NEO_220,
NEO_45, NEO_105, NEO_20, NEO_80, NEO_140, NEO_55, NEO_115, NEO_175, NEO_205, NEO_30, NEO_90, NEO_150),~ as.numeric(as.character(.))))
dados <- dados %>%
mutate(across(c(NEO_1, NEO_61, NEO_121, NEO_181, NEO_36, NEO_96, NEO_156, NEO_11, NEO_71, NEO_46,
NEO_106, NEO_166, NEO_21, NEO_81, NEO_141, NEO_231, NEO_56, NEO_116, NEO_176, NEO_206, NEO_236, NEO_32,
NEO_92, NEO_7, NEO_67, NEO_127, NEO_187, NEO_42, NEO_102, NEO_162, NEO_222, NEO_17, NEO_77, NEO_137,
NEO_52, NEO_112, NEO_27, NEO_87, NEO_147, NEO_207, NEO_33, NEO_93, NEO_153, NEO_183, NEO_213, NEO_8,
NEO_68, NEO_128, NEO_43, NEO_103, NEO_163, NEO_18, NEO_78, NEO_138, NEO_198, NEO_228, NEO_53, NEO_113,
NEO_173, NEO_28, NEO_88, NEO_148, NEO_208, NEO_238, NEO_4, NEO_64, NEO_124, NEO_39, NEO_99, NEO_159,
NEO_189, NEO_219, NEO_14, NEO_74, NEO_134, NEO_49, NEO_109, NEO_169, NEO_199, NEO_229, NEO_24, NEO_84,
NEO_144, NEO_234, NEO_59, NEO_119, NEO_5, NEO_35, NEO_95, NEO_155, NEO_10, NEO_70, NEO_130, NEO_190, NEO_220,
NEO_45, NEO_105, NEO_20, NEO_80, NEO_140, NEO_55, NEO_115, NEO_175, NEO_205, NEO_30, NEO_90, NEO_150), ~ recode(.,
`4` = "0",
`3` = "1",
`2` = "2",
`1` = "3",
`0` = "4")))
library(lavaan)
modelo_NEO<- "
Fator Neuro=~ NEO_1 + NEO_31 + NEO_61 + NEO_91 + NEO_121 + NEO_151 + NEO_181 + NEO_211 + NEO_6 + NEO_36 +
NEO_66 + NEO_96 + NEO_126 + NEO_156 + NEO_186 + NEO_216 + NEO_11 + NEO_41 + NEO_71 + NEO_101 + NEO_131 + NEO_161 +
NEO_191 + NEO_221 + NEO_16 + NEO_46 + NEO_76 + NEO_106 + NEO_136 + NEO_166 + NEO_196 + NEO_226 + NEO_21 +
NEO_51 + NEO_81 + NEO_111 + NEO_141 + NEO_171 + NEO_201 + NEO_231 + NEO_26 + NEO_56 + NEO_86 + NEO_116 +
NEO_146 + NEO_176 + NEO_206 + NEO_236
Fator Extro=~ NEO_2 + NEO_32 + NEO_62 + NEO_92 + NEO_122 + NEO_152 + NEO_182 + NEO_212 + NEO_7 + NEO_37 + NEO_67 +
NEO_97 + NEO_127 + NEO_157 + NEO_187 + NEO_217 + NEO_12 + NEO_42 + NEO_72 + NEO_102 + NEO_132 + NEO_162 + NEO_192 + NEO_222 +
NEO_17 + NEO_47 + NEO_77 + NEO_107 + NEO_137 + NEO_167 + NEO_197 + NEO_227 + NEO_22 + NEO_52 + NEO_82 + NEO_112 + NEO_142 +
NEO_172 + NEO_202 + NEO_232 + NEO_27 + NEO_57 + NEO_87 + NEO_117 + NEO_147 + NEO_177 + NEO_207 + NEO_237
Fator Abert=~ NEO_3 + NEO_33 + NEO_63 + NEO_93 + NEO_123 + NEO_153 + NEO_183 + NEO_213 + NEO_8 + NEO_38 + NEO_68 + NEO_98 +
NEO_128 + NEO_158 + NEO_188 + NEO_218 + NEO_13 + NEO_43 + NEO_73 + NEO_103 + NEO_133 + NEO_163 + NEO_193 + NEO_223 + NEO_18 +
NEO_48 + NEO_78 + NEO_108 + NEO_138 + NEO_168 + NEO_198 + NEO_228 + NEO_23 + NEO_53 + NEO_83 + NEO_113 + NEO_143 + NEO_173 +
NEO_203 + NEO_233 + NEO_28 + NEO_58 + NEO_88 + NEO_118 + NEO_148 + NEO_178 + NEO_208 + NEO_238
Fator Amab=~ NEO_4 + NEO_34 + NEO_64 + NEO_94 + NEO_124 + NEO_154 + NEO_184 + NEO_214 + NEO_9 + NEO_39 + NEO_69 + NEO_99 +
NEO_129 + NEO_159 + NEO_189 + NEO_219 + NEO_14 + NEO_44 + NEO_74 + NEO_104 + NEO_134 + NEO_164 + NEO_194 + NEO_224 + NEO_19 +
NEO_49 + NEO_79 + NEO_109 + NEO_139 + NEO_169 + NEO_199 + NEO_229 + NEO_24 + NEO_54 + NEO_84 + NEO_114 + NEO_144 + NEO_174 +
NEO_204 + NEO_234 + NEO_29 + NEO_59 + NEO_89 + NEO_119 + NEO_149 + NEO_179 + NEO_209 + NEO_239
Fator Consc=~ NEO_5 + NEO_35 + NEO_65 + NEO_95 + NEO_125 + NEO_155 + NEO_185 + NEO_215 + NEO_10 + NEO_40 + NEO_70 +
NEO_100 + NEO_130 + NEO_160 + NEO_190 + NEO_220 + NEO_15 + NEO_45 + NEO_75 + NEO_105 + NEO_135 + NEO_165 + NEO_195 +
NEO_225 + NEO_20 + NEO_50 + NEO_80 + NEO_110 + NEO_140 + NEO_170 + NEO_200 + NEO_230 + NEO_25 + NEO_55 + NEO_85 +
NEO_115 + NEO_145 + NEO_175 + NEO_205 + NEO_235 + NEO_30 + NEO_60 + NEO_90 + NEO_120 + NEO_150 + NEO_180 + NEO_210 + NEO_240
"
items <- c(
"NEO_1", "NEO_2", "NEO_3", "NEO_4", "NEO_5", "NEO_6", "NEO_7", "NEO_8", "NEO_9", "NEO_10",
"NEO_11", "NEO_12", "NEO_13", "NEO_14", "NEO_15", "NEO_16", "NEO_17", "NEO_18", "NEO_19", "NEO_20",
"NEO_21", "NEO_22", "NEO_23", "NEO_24", "NEO_25", "NEO_26", "NEO_27", "NEO_28", "NEO_29", "NEO_30",
"NEO_31", "NEO_32", "NEO_33", "NEO_34", "NEO_35", "NEO_36", "NEO_37", "NEO_38", "NEO_39", "NEO_40",
"NEO_41", "NEO_42", "NEO_43", "NEO_44", "NEO_45", "NEO_46", "NEO_47", "NEO_48", "NEO_49", "NEO_50",
"NEO_51", "NEO_52", "NEO_53", "NEO_54", "NEO_55", "NEO_56", "NEO_57", "NEO_58", "NEO_59", "NEO_60",
"NEO_61", "NEO_62", "NEO_63", "NEO_64", "NEO_65", "NEO_66", "NEO_67", "NEO_68", "NEO_69", "NEO_70",
"NEO_71", "NEO_72", "NEO_73", "NEO_74", "NEO_75", "NEO_76", "NEO_77", "NEO_78", "NEO_79", "NEO_80",
"NEO_81", "NEO_82", "NEO_83", "NEO_84", "NEO_85", "NEO_86", "NEO_87", "NEO_88", "NEO_89", "NEO_90",
"NEO_91", "NEO_92", "NEO_93", "NEO_94", "NEO_95", "NEO_96", "NEO_97", "NEO_98", "NEO_99", "NEO_100",
"NEO_101", "NEO_102", "NEO_103", "NEO_104", "NEO_105", "NEO_106", "NEO_107", "NEO_108", "NEO_109", "NEO_110",
"NEO_111", "NEO_112", "NEO_113", "NEO_114", "NEO_115", "NEO_116", "NEO_117", "NEO_118", "NEO_119", "NEO_120",
"NEO_121", "NEO_122", "NEO_123", "NEO_124", "NEO_125", "NEO_126", "NEO_127", "NEO_128", "NEO_129", "NEO_130",
"NEO_131", "NEO_132", "NEO_133", "NEO_134", "NEO_135", "NEO_136", "NEO_137", "NEO_138", "NEO_139", "NEO_140",
"NEO_141", "NEO_142", "NEO_143", "NEO_144", "NEO_145", "NEO_146", "NEO_147", "NEO_148", "NEO_149", "NEO_150",
"NEO_151", "NEO_152", "NEO_153", "NEO_154", "NEO_155", "NEO_156", "NEO_157", "NEO_158", "NEO_159", "NEO_160",
"NEO_161", "NEO_162", "NEO_163", "NEO_164", "NEO_165", "NEO_166", "NEO_167", "NEO_168", "NEO_169", "NEO_170",
"NEO_171", "NEO_172", "NEO_173", "NEO_174", "NEO_175", "NEO_176", "NEO_177", "NEO_178", "NEO_179", "NEO_180",
"NEO_181", "NEO_182", "NEO_183", "NEO_184", "NEO_185", "NEO_186", "NEO_187", "NEO_188", "NEO_189", "NEO_190",
"NEO_191", "NEO_192", "NEO_193", "NEO_194", "NEO_195", "NEO_196", "NEO_197", "NEO_198", "NEO_199", "NEO_200",
"NEO_201", "NEO_202", "NEO_203", "NEO_204", "NEO_205", "NEO_206", "NEO_207", "NEO_208", "NEO_209", "NEO_210",
"NEO_211", "NEO_212", "NEO_213", "NEO_214", "NEO_215", "NEO_216", "NEO_217", "NEO_218", "NEO_219", "NEO_220",
"NEO_221", "NEO_222", "NEO_223", "NEO_224", "NEO_225", "NEO_226", "NEO_227", "NEO_228", "NEO_229", "NEO_230",
"NEO_231", "NEO_232", "NEO_233", "NEO_234", "NEO_235", "NEO_236", "NEO_237", "NEO_238", "NEO_239", "NEO_240"
)
psych::describe(dados[, items])
dados[,items] <- lapply(dados[,items], as.numeric)
psych::describe(dados[, items])
dados$NEO_1
count(!is.na(dados$NEO_1))
items <- c(
"NEO_1", "NEO_2", "NEO_3", "NEO_4", "NEO_5", "NEO_6", "NEO_7", "NEO_8", "NEO_9", "NEO_10",
"NEO_11", "NEO_12", "NEO_13", "NEO_14", "NEO_15", "NEO_16", "NEO_17", "NEO_18", "NEO_19", "NEO_20",
"NEO_21", "NEO_22", "NEO_23", "NEO_24", "NEO_25", "NEO_26", "NEO_27", "NEO_28", "NEO_29", "NEO_30",
"NEO_31", "NEO_32", "NEO_33", "NEO_34", "NEO_35", "NEO_36", "NEO_37", "NEO_38", "NEO_39", "NEO_40",
"NEO_41", "NEO_42", "NEO_43", "NEO_44", "NEO_45", "NEO_46", "NEO_47", "NEO_48", "NEO_49", "NEO_50",
"NEO_51", "NEO_52", "NEO_53", "NEO_54", "NEO_55", "NEO_56", "NEO_57", "NEO_58", "NEO_59", "NEO_60",
"NEO_61", "NEO_62", "NEO_63", "NEO_64", "NEO_65", "NEO_66", "NEO_67", "NEO_68", "NEO_69", "NEO_70",
"NEO_71", "NEO_72", "NEO_73", "NEO_74", "NEO_75", "NEO_76", "NEO_77", "NEO_78", "NEO_79", "NEO_80",
"NEO_81", "NEO_82", "NEO_83", "NEO_84", "NEO_85", "NEO_86", "NEO_87", "NEO_88", "NEO_89", "NEO_90",
"NEO_91", "NEO_92", "NEO_93", "NEO_94", "NEO_95", "NEO_96", "NEO_97", "NEO_98", "NEO_99", "NEO_100",
"NEO_101", "NEO_102", "NEO_103", "NEO_104", "NEO_105", "NEO_106", "NEO_107", "NEO_108", "NEO_109", "NEO_110",
"NEO_111", "NEO_112", "NEO_113", "NEO_114", "NEO_115", "NEO_116", "NEO_117", "NEO_118", "NEO_119", "NEO_120",
"NEO_121", "NEO_122", "NEO_123", "NEO_124", "NEO_125", "NEO_126", "NEO_127", "NEO_128", "NEO_129", "NEO_130",
"NEO_131", "NEO_132", "NEO_133", "NEO_134", "NEO_135", "NEO_136", "NEO_137", "NEO_138", "NEO_139", "NEO_140",
"NEO_141", "NEO_142", "NEO_143", "NEO_144", "NEO_145", "NEO_146", "NEO_147", "NEO_148", "NEO_149", "NEO_150",
"NEO_151", "NEO_152", "NEO_153", "NEO_154", "NEO_155", "NEO_156", "NEO_157", "NEO_158", "NEO_159", "NEO_160",
"NEO_161", "NEO_162", "NEO_163", "NEO_164", "NEO_165", "NEO_166", "NEO_167", "NEO_168", "NEO_169", "NEO_170",
"NEO_171", "NEO_172", "NEO_173", "NEO_174", "NEO_175", "NEO_176", "NEO_177", "NEO_178", "NEO_179", "NEO_180",
"NEO_181", "NEO_182", "NEO_183", "NEO_184", "NEO_185", "NEO_186", "NEO_187", "NEO_188", "NEO_189", "NEO_190",
"NEO_191", "NEO_192", "NEO_193", "NEO_194", "NEO_195", "NEO_196", "NEO_197", "NEO_198", "NEO_199", "NEO_200",
"NEO_201", "NEO_202", "NEO_203", "NEO_204", "NEO_205", "NEO_206", "NEO_207", "NEO_208", "NEO_209", "NEO_210",
"NEO_211", "NEO_212", "NEO_213", "NEO_214", "NEO_215", "NEO_216", "NEO_217", "NEO_218", "NEO_219", "NEO_220",
"NEO_221", "NEO_222", "NEO_223", "NEO_224", "NEO_225", "NEO_226", "NEO_227", "NEO_228", "NEO_229", "NEO_230",
"NEO_231", "NEO_232", "NEO_233", "NEO_234", "NEO_235", "NEO_236", "NEO_237", "NEO_238", "NEO_239", "NEO_240"
)
dados[,items] <- lapply(dados[,items], as.numeric)
count(!is.na(dados$NEO_1))
is.na(dados$NEO_1)
!is.na(dados$NEO_1)
table(!is.na(dados$NEO_1))
tail(dados$NEO_1)
dados <- read_excel("E:/BANCO_GERAL2.xlsx")
dados[,items] <- lapply(dados[,items], as.numeric)
dados <- dados %>%
mutate(across(c(NEO_1, NEO_61, NEO_121, NEO_181, NEO_36, NEO_96, NEO_156, NEO_11, NEO_71, NEO_46,
NEO_106, NEO_166, NEO_21, NEO_81, NEO_141, NEO_231, NEO_56, NEO_116, NEO_176, NEO_206, NEO_236, NEO_32,
NEO_92, NEO_7, NEO_67, NEO_127, NEO_187, NEO_42, NEO_102, NEO_162, NEO_222, NEO_17, NEO_77, NEO_137,
NEO_52, NEO_112, NEO_27, NEO_87, NEO_147, NEO_207, NEO_33, NEO_93, NEO_153, NEO_183, NEO_213, NEO_8,
NEO_68, NEO_128, NEO_43, NEO_103, NEO_163, NEO_18, NEO_78, NEO_138, NEO_198, NEO_228, NEO_53, NEO_113,
NEO_173, NEO_28, NEO_88, NEO_148, NEO_208, NEO_238, NEO_4, NEO_64, NEO_124, NEO_39, NEO_99, NEO_159,
NEO_189, NEO_219, NEO_14, NEO_74, NEO_134, NEO_49, NEO_109, NEO_169, NEO_199, NEO_229, NEO_24, NEO_84,
NEO_144, NEO_234, NEO_59, NEO_119, NEO_5, NEO_35, NEO_95, NEO_155, NEO_10, NEO_70, NEO_130, NEO_190, NEO_220,
NEO_45, NEO_105, NEO_20, NEO_80, NEO_140, NEO_55, NEO_115, NEO_175, NEO_205, NEO_30, NEO_90, NEO_150), ~ recode(.,
`4` = "0",
`3` = "1",
`2` = "2",
`1` = "3",
`0` = "4")))
table(is.na(dados$NEO_1))
psych::describe(dados[, items])
hist(dados$NEO_33)
hist(dados$NEO_48)
fitwmt2 <- cfa(modelo_NEO, data = dados[,items], ordered=T)
fitwmt2 <- cfa(modelo_NEO, data = dados[,items], ordered=F)
knitr::opts_chunk$set(echo = TRUE)
source("D://OneDrive - ISPA//psicomA.R")
Emotions =~IntENVIR + GRNCON +  NATENVIY + NATENVIZ"
bd <- read_sav("D:/OneDrive - ISPA/ongoing/AngelaLeite/GSS2018.sav")
View(psicomA)
bd <- read_sav("D:/OneDrive - ISPA/ongoing/AngelaLeite/GSS2018.sav")
bd <- haven::read_sav("D:/OneDrive - ISPA/ongoing/AngelaLeite/GSS2018.sav")
mod <- "ExpNatura =~ NATNOTICE + NATVIEWS + NATACCESS + NATTIME + NATSAT + NATTIMEOK + NATRELAX + NATACTIVE + NATMEET
PerspectNatu =~ NATRELAX + NATACTIVE + NATMEET
AwareClima =~ SCIWORSE + HARMSGRN + NATURPAX + NATURWAR + GRWTHARM + NATRECON + KNWCAUSE + KNOWSOL + GRNEFFME + TEMPGEN1
ProEnvBehav =~ VOLENVIR + MONENVIR + HRSENVIR + GIVENVIR + TOTENVIR + VALENVIR + ENVIRO12
Emotions =~IntENVIR + GRNCON +  NATENVIY + NATENVIZ"
items <- c("NATNOTICE", "NATVIEWS", "NATACCESS", "NATTIME", "NATSAT", "NATTIMEOK", "NATRELAX", "NATACTIVE", "NATMEET",
"SCIWORSE", "HARMSGRN", "NATURPAX", "NATURWAR", "GRWTHARM", "NATRECON", "KNWCAUSE", "KNOWSOL", "GRNEFFME", "TEMPGEN1",
"VOLENVIR", "MONENVIR", "HRSENVIR", "GIVENVIR", "TOTENVIR", "VALENVIR", "ENVIRO12", "INTENVIR", "GRNCON", "NATENVIY", "NATENVIZ")
psicomA(mod, bd[, items], ordered=F, vd=T)
bd$SCIWORSE
bd$SCIWORSE
View(bd)
bd$NATVIEWS
bd$NATNOTICE
#set all 0, 8 and 9 as missings
bd[bd == 0|bd == 8|bd == 9] <- NA
bd$NATNOTICE
bd <- haven::read_sav("D:/OneDrive - ISPA/ongoing/AngelaLeite/GSS2018.sav")
bd$NATNOTICE
bd$HARMSGRN
knitr::opts_chunk$set(echo = TRUE)
source("D://OneDrive - ISPA//psicomA.R")
bd <- haven::read_sav("D:/OneDrive - ISPA/ongoing/AngelaLeite/Marôco.sav")
mod <- "ExpNatura =~ NATNOTICE + NATVIEWS + NATACCESS + NATTIME + NATSAT + NATTIMEOK + NATRELAX + NATACTIVE + NATMEET
PerspectNatu =~ NATRELAX + NATACTIVE + NATMEET
AwarClima =~ SCIWORSE + HARMSGRN + NATURPAX + NATURWAR + GRWTHARM + NATRECON + KNWCAUSE + KNOWSOL + GRNEFFME + TEMPGEN1
ProEnvBehav =~ VOLENVIR + MONENVIR + HRSENVIR + GIVENVIR + TOTENVIR + VALENVIR + ENVIRO12
Emotions =~IntENVIR + GRNCON +  NATENVIY + NATENVIZ"
items <- c("NATNOTICE", "NATVIEWS", "NATACCESS", "NATTIME", "NATSAT", "NATTIMEOK", "NATRELAX", "NATACTIVE", "NATMEET",
"SCIWORSE", "HARMSGRN", "NATURPAX", "NATURWAR", "GRWTHARM", "NATRECON", "KNWCAUSE", "KNOWSOL", "GRNEFFME", "TEMPGEN1",
"VOLENVIR", "MONENVIR", "HRSENVIR", "GIVENVIR", "TOTENVIR", "VALENVIR", "ENVIRO12", "INTENVIR", "GRNCON", "NATENVIY", "NATENVIZ")
bd[, items]
saveRDS(bd[,items], "D:/OneDrive - ISPA/ongoing/AngelaLeite/bd_items.rds")
bd <- readRDS("D:/OneDrive - ISPA/ongoing/AngelaLeite/bd_items.rds")
psicomA(mod, bd[, items], ordered=F, vd=T)
pacman::p_load(haven, lavaan, semPlot, knirt, psych, dplyr, semTools, semPlot, sem, semTools)
pacman::p_load(haven, lavaan, semPlot, knit, psych, dplyr, semTools, semPlot, semTools)
pacman::p_load(haven, lavaan, semPlot, knitr, psych, dplyr, semTools, semPlot, semTools)
psicomA(mod, bd[, items], ordered=F, vd=T)
pacman::p_load(haven, lavaan, semPlot, knitr, psych, dplyr, semTools, semPlot, semTools)
source("D://OneDrive - ISPA//psicomA.R")
#bd <- haven::read_sav("D:/OneDrive - ISPA/ongoing/AngelaLeite/Marôco.sav")
#set all 0, 8 and 9 as missings
#bd[bd == 0|bd == 8|bd == 9] <- NA
mod <- "ExpNatura =~ NATNOTICE + NATVIEWS + NATACCESS + NATTIME + NATSAT + NATTIMEOK + NATRELAX + NATACTIVE + NATMEET
PerspectNatu =~ NATRELAX + NATACTIVE + NATMEET
AwarClima =~ SCIWORSE + HARMSGRN + NATURPAX + NATURWAR + GRWTHARM + NATRECON + KNWCAUSE + KNOWSOL + GRNEFFME + TEMPGEN1
ProEnvBehav =~ VOLENVIR + MONENVIR + HRSENVIR + GIVENVIR + TOTENVIR + VALENVIR + ENVIRO12
Emotions =~ INTENVIR + GRNCON +  NATENVIY + NATENVIZ"
items <- c("NATNOTICE", "NATVIEWS", "NATACCESS", "NATTIME", "NATSAT", "NATTIMEOK", "NATRELAX", "NATACTIVE", "NATMEET",
"SCIWORSE", "HARMSGRN", "NATURPAX", "NATURWAR", "GRWTHARM", "NATRECON", "KNWCAUSE", "KNOWSOL", "GRNEFFME", "TEMPGEN1",
"VOLENVIR", "MONENVIR", "HRSENVIR", "GIVENVIR", "TOTENVIR", "VALENVIR", "ENVIRO12", "INTENVIR", "GRNCON", "NATENVIY", "NATENVIZ")
saveRDS(bd[,items], "D:/OneDrive - ISPA/ongoing/AngelaLeite/bd_items.rds")
bd <- readRDS("D:/OneDrive - ISPA/ongoing/AngelaLeite/bd_items.rds")
psicomA(mod, bd[, items], ordered=F, vd=T)
bd <- bd %>% na.omit()
bd
bd <- readRDS("D:/OneDrive - ISPA/ongoing/AngelaLeite/bd_items.rds")
#mice imputation
bd <- mice::mice(bd, m=5, maxit=50, method="pmm", seed=123)
bd <- readRDS("D:/OneDrive - ISPA/ongoing/AngelaLeite/bd_items.rds") |> as.data.frame()
#mice imputation
bd <- mice::mice(bd, m=5, maxit=50, method="pmm", seed=123)
bd
bd <- readRDS("D:/OneDrive - ISPA/ongoing/AngelaLeite/bd_items.rds") |> as.data.frame()
bd
View(bd)
imputed_data <- mice::mice(bd, m = 5, method = "pmm", maxit = 5, seed = 123)
#mice imputation
bd <- bd %>% mutate(across(where(is.labelled), as_factor))
imputed_data <- mice::mice(bd, m = 5, method = "pmm", maxit = 5, seed = 123)
imputed_data <- mice::mice(bd, m = 5, method = "pmm", maxit = 5, seed = 123)
#count percentage of missing data per variable in bd
miss <- bd %>% summarise_all(~sum(is.na(.))/n()) %>% tibble::rownames_to_column("Variable") %>% arrange(desc(`sum(is.na(.))/n()`))
bd %>% summarise_all(~sum(is.na(.))/n())
miss <- bd %>% summarise_all(~sum(is.na(.))/n()) %>% tibble::rownames_to_column("Variable")
miss <- bd %>% summarise_all(~sum(is.na(.))/n()) %>% tibble::rownames_to_column("Variable") %>% arrange(desc(`sum(is.na(.))/n()`))
miss
miss|>round(3)
print(miss)
#count percentage of missing data per variable in bd
miss <- bd %>% summarise_all(~sum(is.na(.))/n()) %>% tibble::rownames_to_column("Variable") %>% arrange(desc(`sum(is.na(.))/n()`))
#count percentage of missing data per variable in bd
miss <- bd %>% summarise_all(~sum(is.na(.))/n()) %>% tibble::rownames_to_column("Variable")
miss
View(miss)
miss
miss|>t()
# for Maroquices
options(jamovi_home="C:\\Program Files\\jamovi 2.6.0.0\\bin")
library(jmvtools)
library(jmvtools)
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
setwd("D:/OneDrive - ISPA/ongoing/jamoviR/Maroquices")
jmvtools::install()
